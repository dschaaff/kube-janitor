name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  wait-for-docker:
    name: Wait for Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Docker Build Workflow
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Merge Docker manifests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get commit SHA from tag
        id: get_commit
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
          SHORT_COMMIT=$(echo $TAG_COMMIT | cut -c1-7)
          echo "TAG_COMMIT=$TAG_COMMIT" >> $GITHUB_OUTPUT
          echo "SHORT_COMMIT=$SHORT_COMMIT" >> $GITHUB_OUTPUT

      - name: Tag multi-architecture Docker images with release version
        run: |
          VERSION_TAG="${GITHUB_REF#refs/tags/}"
          SHORT_SHA="${{ steps.get_commit.outputs.SHORT_COMMIT }}"

          # Use the repository name from GitHub context
          SOURCE_IMAGE="ghcr.io/${{ github.repository }}:sha-${SHORT_SHA}"

          echo "Checking if source image exists: ${SOURCE_IMAGE}"
          if ! docker buildx imagetools inspect "${SOURCE_IMAGE}" &>/dev/null; then
            echo "Warning: Source image ${SOURCE_IMAGE} does not exist"
            echo "Trying with just the short SHA tag..."
            SOURCE_IMAGE="ghcr.io/${{ github.repository }}:${SHORT_SHA}"

            if ! docker buildx imagetools inspect "${SOURCE_IMAGE}" &>/dev/null; then
              echo "Error: Source image ${SOURCE_IMAGE} does not exist either"
              echo "Make sure your CI workflow has built and pushed this image"
              exit 1
            fi
          fi

          echo "Tagging image with version: ${VERSION_TAG}"
          docker buildx imagetools create \
            --tag "ghcr.io/${{ github.repository }}:${VERSION_TAG}" \
            "${SOURCE_IMAGE}" || { echo "Failed to tag with version"; exit 1; }

          echo "Tagging image as latest"
          docker buildx imagetools create \
            --tag "ghcr.io/${{ github.repository }}:latest" \
            "${SOURCE_IMAGE}" || { echo "Failed to tag as latest"; exit 1; }

          echo "Successfully tagged ${SOURCE_IMAGE} as version ${VERSION_TAG} and latest"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
